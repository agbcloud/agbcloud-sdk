name: Test Suite

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'agb/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'agb/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/test.yml'
  schedule:
    # Run once daily at 2 AM
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: Unit Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]

    - name: Run unit tests
      run: |
        pytest tests/ -v \
          --cov=agb \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-report=html \
          --junit-xml=pytest-results.xml \
          --cov-fail-under=70
      env:
        AGB_API_KEY: "test-key-for-unit-tests"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
          coverage.xml

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: pytest-results.xml
        comment_mode: create new
        check_name: "Unit Test Results (Python ${{ matrix.python-version }})"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'  # Scheduled tasks do not run integration tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v \
          --maxfail=3 \
          --timeout=300 \
          --junit-xml=integration-results.xml
      env:
        AGB_API_KEY: ${{ secrets.AGB_API_KEY_TEST }}
      continue-on-error: true

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: integration-results.xml

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        pytest tests/ -k "benchmark" \
          --benchmark-only \
          --benchmark-json=benchmark.json
      continue-on-error: true

    - name: Upload benchmark results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  test-package-installation:
    name: Test Package Installation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.12"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Build package
      run: |
        python -m pip install --upgrade pip build
        python -m build

    - name: Test wheel installation
      run: |
        pip install dist/*.whl

    - name: Test import
      run: |
        python -c "
        import agb
        from agb import AGB, Session, CreateSessionParams
        print('✅ Package imports successfully')
        print(f'Available classes: {agb.__all__}')
        "

    - name: Test source installation
      run: |
        pip uninstall -y agbcloud-sdk
        pip install -e .
        python -c "import agb; print('✅ Editable install works')"

  test-documentation:
    name: Test Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Test documentation examples
      run: |
        # Test example code in README
        python -c "
        # Here you can test if example code in docs runs correctly
        try:
            from agb import AGB, CreateSessionParams
            # Test basic imports and class creation
            params = CreateSessionParams(image_id='test')
            print('✅ Documentation examples syntax check passed')
        except Exception as e:
            print(f'❌ Documentation example failed: {e}')
            exit(1)
        "

    - name: Check documentation links
      run: |
        # Check if links in documentation are valid
        find docs/ -name "*.md" -type f | head -5 | while read file; do
          echo "Checking $file"
          # Link checking logic can be added here
        done